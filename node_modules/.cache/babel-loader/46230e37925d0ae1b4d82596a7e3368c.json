{"ast":null,"code":"import _regeneratorRuntime from \"/Users/garrett.palmeri/Downloads/dv01FrontendChallenge202103/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/garrett.palmeri/Downloads/dv01FrontendChallenge202103/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Papa from 'papaparse';\nimport rawData from './loansize.csv';\n\nvar parseData = function parseData(result, rawData) {\n  result.data.splice(0, 2);\n  var data = result.data;\n\n  for (var i = 0; i < data.length; i += 1) {\n    var year = data[i][0];\n    var quarter = data[i][1];\n    var grade = data[i][2];\n    var homeOwnership = data[i][3];\n    var term = data[i][4];\n    var currentBalance = data[i][5];\n    rawData.push({\n      year: year,\n      quarter: quarter,\n      grade: grade,\n      homeOwnership: homeOwnership,\n      term: term,\n      currentBalance: currentBalance\n    });\n  }\n\n  return rawData;\n};\n\nexport var getData =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var csvData, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(rawData).then(function (response) {\n              return response.text();\n            });\n\n          case 2:\n            csvData = _context.sent;\n            data = [];\n            _context.next = 6;\n            return Papa.parse(csvData, {\n              complete: function complete(result) {\n                return parseData(result, data);\n              }\n            });\n\n          case 6:\n            return _context.abrupt(\"return\", data);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  return function getData() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/garrett.palmeri/Downloads/dv01FrontendChallenge202103/src/request/api.js"],"names":["Papa","rawData","parseData","result","data","splice","i","length","year","quarter","grade","homeOwnership","term","currentBalance","push","getData","fetch","then","response","text","csvData","parse","complete"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,MAAD,EAASF,OAAT,EAAqB;AACrCE,EAAAA,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmB,CAAnB,EAAsB,CAAtB;AADqC,MAE7BD,IAF6B,GAEpBD,MAFoB,CAE7BC,IAF6B;;AAGrC,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,IAAI,CAAtC,EAAyC;AACvC,QAAME,IAAI,GAAGJ,IAAI,CAACE,CAAD,CAAJ,CAAQ,CAAR,CAAb;AACA,QAAMG,OAAO,GAAGL,IAAI,CAACE,CAAD,CAAJ,CAAQ,CAAR,CAAhB;AACA,QAAMI,KAAK,GAAGN,IAAI,CAACE,CAAD,CAAJ,CAAQ,CAAR,CAAd;AACA,QAAMK,aAAa,GAAGP,IAAI,CAACE,CAAD,CAAJ,CAAQ,CAAR,CAAtB;AACA,QAAMM,IAAI,GAAGR,IAAI,CAACE,CAAD,CAAJ,CAAQ,CAAR,CAAb;AACA,QAAMO,cAAc,GAAGT,IAAI,CAACE,CAAD,CAAJ,CAAQ,CAAR,CAAvB;AACAL,IAAAA,OAAO,CAACa,IAAR,CAAa;AACXN,MAAAA,IAAI,EAAJA,IADW;AAEXC,MAAAA,OAAO,EAAPA,OAFW;AAGXC,MAAAA,KAAK,EAALA,KAHW;AAIXC,MAAAA,aAAa,EAAbA,aAJW;AAKXC,MAAAA,IAAI,EAAJA,IALW;AAMXC,MAAAA,cAAc,EAAdA;AANW,KAAb;AAQD;;AAED,SAAOZ,OAAP;AACD,CArBD;;AAuBA,OAAO,IAAMc,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACCC,KAAK,CAACf,OAAD,CAAL,CAAegB,IAAf,CAAoB,UAACC,QAAD,EAAc;AACtD,qBAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,aAFqB,CADD;;AAAA;AACfC,YAAAA,OADe;AAIfhB,YAAAA,IAJe,GAIR,EAJQ;AAAA;AAAA,mBAKfJ,IAAI,CAACqB,KAAL,CAAWD,OAAX,EAAoB;AACxBE,cAAAA,QAAQ,EAAE,kBAACnB,MAAD;AAAA,uBAAYD,SAAS,CAACC,MAAD,EAASC,IAAT,CAArB;AAAA;AADc,aAApB,CALe;;AAAA;AAAA,6CASdA,IATc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPW,OAAO;AAAA;AAAA;AAAA,GAAb","sourcesContent":["import Papa from 'papaparse'\nimport rawData from './loansize.csv'\n\nconst parseData = (result, rawData) => {\n  result.data.splice(0, 2)\n  const { data } = result\n  for (let i = 0; i < data.length; i += 1) {\n    const year = data[i][0]\n    const quarter = data[i][1]\n    const grade = data[i][2]\n    const homeOwnership = data[i][3]\n    const term = data[i][4]\n    const currentBalance = data[i][5]\n    rawData.push({\n      year,\n      quarter,\n      grade,\n      homeOwnership,\n      term,\n      currentBalance,\n    })\n  }\n\n  return rawData\n}\n\nexport const getData = async () => {\n  const csvData = await fetch(rawData).then((response) => {\n    return response.text()\n  })\n  const data = []\n  await Papa.parse(csvData, {\n    complete: (result) => parseData(result, data),\n  })\n\n  return data\n}\n"]},"metadata":{},"sourceType":"module"}